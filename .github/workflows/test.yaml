name: "ðŸ§ª Test"

on:
  workflow_dispatch:
    null

jobs:
  build:
    name: "Build wheel"
    outputs:
      wheel-name: "${{ steps.build-wheel.outputs.wheel-name }}"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout repo"
        uses: "actions/checkout@v4"

      - name: "Build wheel"
        id: "build-wheel"
        run: |
          python -m pip install build
          python -m build --wheel
          echo "wheel-name=$(ls -1 dist/ | head -n 1)" >> "$GITHUB_OUTPUT"

      - name: "Upload wheel"
        uses: "actions/upload-artifact@v4"
        with:
          name: "wheel"
          retention-days: 1
          path: "dist/${{ steps.build-wheel.outputs.wheel-name }}"

  test:
    needs:
      - "build"
    name:
      "${{
        (startsWith(matrix.runner, 'ubuntu') && 'Linux')
        || (startsWith(matrix.runner, 'macos') && 'macOS')
        || (startsWith(matrix.runner, 'windows') && 'Windows')
      }}"

    strategy:
      matrix:
        runner:
          - "ubuntu-latest"
          - "windows-latest"
          - "macos-latest"

        include:
          - pythons:
              - "3.8"
              - "3.9"
              - "3.10"
              - "3.11"
              - "3.12"
              - "3.13"

    runs-on: "${{ matrix.runner }}"
    steps:
      - name: "Checkout repo"
        uses: "actions/checkout@v4"

      - name: "Setup Python"
        uses: "actions/setup-python@v5"
        with:
          python-version: "${{ join(matrix.pythons, '\n') }}"

      - name: "Detect Pythons"
        uses: "kurtmckee/detect-pythons@v1"

      - name: "Restore cache"
        id: "restore-cache"
        uses: "actions/cache@v4"
        with:
          key:
            "${{
              format(
                'test-os={0}-hash={1}',
                matrix.runner,
                hashFiles(
                  '.python-identifiers',
                  'requirements/*/requirements.txt',
                  'pyproject.toml',
                  'tox.ini'
                )
              )
            }}"
          path: |
            .tox/
            .venv/

      - name: "Identify venv path"
        shell: "bash"
        run: |
          echo 'venv-path=.venv/${{ runner.os == 'Windows' && 'Scripts' || 'bin' }}' >> "$GITHUB_ENV"

      - name: "Install tox"
        if: "steps.restore-cache.outputs.cache-hit != 'true'"
        run: |
          python -m venv .venv/
          ${{ env.venv-path }}/python -m pip install --upgrade pip setuptools wheel
          ${{ env.venv-path }}/python -m pip install tox

      - name: "Download wheel"
        uses: "actions/download-artifact@v4"
        with:
          name: "wheel"

      - name: "Run tox"
        run: |
          ${{ env.venv-path }}/tox --installpkg "${{ needs.build.outputs.wheel-name }}"
